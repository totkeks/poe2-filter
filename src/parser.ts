/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* FILTER := blocks=BLOCK+ $
* BLOCK :=
* 	visibility=VISIBILITY
* 	NL
* 	conditions=CONDITION+
* 	actions=ACTION*
* 	NL*
* VISIBILITY := 'Show' | 'Hide'
* // Conditions
* // ----------
* CONDITION := type=CONDITION_TYPE _ operator={OPERATOR _}? value=VALUE_LIST NL
* VALUE_LIST := {MULTI_VALUE | SINGLE_VALUE}
* SINGLE_VALUE := NUMBER | STRING | QUOTED_STRING
* MULTI_VALUE := QUOTED_STRING {_ QUOTED_STRING}+
* CONDITION_TYPE :=
* 	'Rarity' |
* 	'Class' |
* 	'BaseType' |
* 	'AreaLevel' |
* 	'StackSize'
* OPERATOR := '==' | '<=' | '>=' | '!=' | '=' | '!' | '<' | '>'
* VALUE := {NUMBER | STRING | QUOTED_STRING}
* NUMBER := '[0-9]+'
* STRING := '[a-zA-Z0-9]+'
* QUOTED_STRING := '"[^"]*"'
* // Actions
* // -------
* ACTION := action={
* 	COLOR_ACTION |
* 	FONT_ACTION |
* 	SOUND_ACTION |
* 	EFFECT_ACTION |
* 	ICON_ACTION }
* 	NL
* COLOR_ACTION :=
*     action={'SetTextColor' | 'SetBorderColor' | 'SetBackgroundColor'}
*     _
*     color=RGBA_VALUE
* FONT_ACTION :=
*     'SetFontSize'
*     _
*     size=NUMBER
* SOUND_ACTION :=
*     'PlayAlertSound'
*     _
*     NUMBER
*     _
*     NUMBER
* EFFECT_ACTION :=
*     'PlayEffect'
*     _
*     COLOR_NAME
* 	 {_ 'Temp'}?
* ICON_ACTION :=
*     'MinimapIcon'
*     _
*     NUMBER
*     _
*     COLOR_NAME
*     _
*     SHAPE
* COLOR_NAME :=
*     'Red' |
*     'Green' |
*     'Blue' |
*     'Brown' |
*     'White' |
*     'Yellow' |
*     'Cyan' |
*     'Grey' |
*     'Orange' |
*     'Pink' |
*     'Purple'
* SHAPE :=
*     'Circle' |
*     'Diamond' |
*     'Hexagon' |
*     'Square' |
*     'Star' |
*     'Triangle' |
*     'Cross' |
*     'Moon' |
*     'Raindrop' |
*     'Kite' |
*     'Pentagon' |
*     'UpsideDownHouse'
* RGBA_VALUE := red=RGB_NUMBER _ green=RGB_NUMBER _ blue=RGB_NUMBER _? alpha=RGB_NUMBER?
* // TODO: Add a check for the range of the values
* RGB_NUMBER := '[0-9]+'
* _ := ' '
* NL := '\n\r?'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    FILTER = "FILTER",
    BLOCK = "BLOCK",
    VISIBILITY_1 = "VISIBILITY_1",
    VISIBILITY_2 = "VISIBILITY_2",
    CONDITION = "CONDITION",
    CONDITION_$0 = "CONDITION_$0",
    VALUE_LIST = "VALUE_LIST",
    VALUE_LIST_$0_1 = "VALUE_LIST_$0_1",
    VALUE_LIST_$0_2 = "VALUE_LIST_$0_2",
    SINGLE_VALUE_1 = "SINGLE_VALUE_1",
    SINGLE_VALUE_2 = "SINGLE_VALUE_2",
    SINGLE_VALUE_3 = "SINGLE_VALUE_3",
    MULTI_VALUE = "MULTI_VALUE",
    MULTI_VALUE_$0 = "MULTI_VALUE_$0",
    CONDITION_TYPE_1 = "CONDITION_TYPE_1",
    CONDITION_TYPE_2 = "CONDITION_TYPE_2",
    CONDITION_TYPE_3 = "CONDITION_TYPE_3",
    CONDITION_TYPE_4 = "CONDITION_TYPE_4",
    CONDITION_TYPE_5 = "CONDITION_TYPE_5",
    OPERATOR_1 = "OPERATOR_1",
    OPERATOR_2 = "OPERATOR_2",
    OPERATOR_3 = "OPERATOR_3",
    OPERATOR_4 = "OPERATOR_4",
    OPERATOR_5 = "OPERATOR_5",
    OPERATOR_6 = "OPERATOR_6",
    OPERATOR_7 = "OPERATOR_7",
    OPERATOR_8 = "OPERATOR_8",
    VALUE = "VALUE",
    VALUE_$0_1 = "VALUE_$0_1",
    VALUE_$0_2 = "VALUE_$0_2",
    VALUE_$0_3 = "VALUE_$0_3",
    NUMBER = "NUMBER",
    STRING = "STRING",
    QUOTED_STRING = "QUOTED_STRING",
    ACTION = "ACTION",
    ACTION_$0_1 = "ACTION_$0_1",
    ACTION_$0_2 = "ACTION_$0_2",
    ACTION_$0_3 = "ACTION_$0_3",
    ACTION_$0_4 = "ACTION_$0_4",
    ACTION_$0_5 = "ACTION_$0_5",
    COLOR_ACTION = "COLOR_ACTION",
    COLOR_ACTION_$0_1 = "COLOR_ACTION_$0_1",
    COLOR_ACTION_$0_2 = "COLOR_ACTION_$0_2",
    COLOR_ACTION_$0_3 = "COLOR_ACTION_$0_3",
    FONT_ACTION = "FONT_ACTION",
    SOUND_ACTION = "SOUND_ACTION",
    EFFECT_ACTION = "EFFECT_ACTION",
    EFFECT_ACTION_$0 = "EFFECT_ACTION_$0",
    ICON_ACTION = "ICON_ACTION",
    COLOR_NAME_1 = "COLOR_NAME_1",
    COLOR_NAME_2 = "COLOR_NAME_2",
    COLOR_NAME_3 = "COLOR_NAME_3",
    COLOR_NAME_4 = "COLOR_NAME_4",
    COLOR_NAME_5 = "COLOR_NAME_5",
    COLOR_NAME_6 = "COLOR_NAME_6",
    COLOR_NAME_7 = "COLOR_NAME_7",
    COLOR_NAME_8 = "COLOR_NAME_8",
    COLOR_NAME_9 = "COLOR_NAME_9",
    COLOR_NAME_10 = "COLOR_NAME_10",
    COLOR_NAME_11 = "COLOR_NAME_11",
    SHAPE_1 = "SHAPE_1",
    SHAPE_2 = "SHAPE_2",
    SHAPE_3 = "SHAPE_3",
    SHAPE_4 = "SHAPE_4",
    SHAPE_5 = "SHAPE_5",
    SHAPE_6 = "SHAPE_6",
    SHAPE_7 = "SHAPE_7",
    SHAPE_8 = "SHAPE_8",
    SHAPE_9 = "SHAPE_9",
    SHAPE_10 = "SHAPE_10",
    SHAPE_11 = "SHAPE_11",
    SHAPE_12 = "SHAPE_12",
    RGBA_VALUE = "RGBA_VALUE",
    RGB_NUMBER = "RGB_NUMBER",
    _ = "_",
    NL = "NL",
    $EOF = "$EOF",
}
export interface FILTER {
    kind: ASTKinds.FILTER;
    blocks: [BLOCK, ...BLOCK[]];
}
export interface BLOCK {
    kind: ASTKinds.BLOCK;
    visibility: VISIBILITY;
    conditions: [CONDITION, ...CONDITION[]];
    actions: ACTION[];
}
export type VISIBILITY = VISIBILITY_1 | VISIBILITY_2;
export type VISIBILITY_1 = string;
export type VISIBILITY_2 = string;
export interface CONDITION {
    kind: ASTKinds.CONDITION;
    type: CONDITION_TYPE;
    operator: Nullable<CONDITION_$0>;
    value: VALUE_LIST;
}
export interface CONDITION_$0 {
    kind: ASTKinds.CONDITION_$0;
}
export type VALUE_LIST = VALUE_LIST_$0;
export type VALUE_LIST_$0 = VALUE_LIST_$0_1 | VALUE_LIST_$0_2;
export type VALUE_LIST_$0_1 = MULTI_VALUE;
export type VALUE_LIST_$0_2 = SINGLE_VALUE;
export type SINGLE_VALUE = SINGLE_VALUE_1 | SINGLE_VALUE_2 | SINGLE_VALUE_3;
export type SINGLE_VALUE_1 = NUMBER;
export type SINGLE_VALUE_2 = STRING;
export type SINGLE_VALUE_3 = QUOTED_STRING;
export interface MULTI_VALUE {
    kind: ASTKinds.MULTI_VALUE;
}
export interface MULTI_VALUE_$0 {
    kind: ASTKinds.MULTI_VALUE_$0;
}
export type CONDITION_TYPE = CONDITION_TYPE_1 | CONDITION_TYPE_2 | CONDITION_TYPE_3 | CONDITION_TYPE_4 | CONDITION_TYPE_5;
export type CONDITION_TYPE_1 = string;
export type CONDITION_TYPE_2 = string;
export type CONDITION_TYPE_3 = string;
export type CONDITION_TYPE_4 = string;
export type CONDITION_TYPE_5 = string;
export type OPERATOR = OPERATOR_1 | OPERATOR_2 | OPERATOR_3 | OPERATOR_4 | OPERATOR_5 | OPERATOR_6 | OPERATOR_7 | OPERATOR_8;
export type OPERATOR_1 = string;
export type OPERATOR_2 = string;
export type OPERATOR_3 = string;
export type OPERATOR_4 = string;
export type OPERATOR_5 = string;
export type OPERATOR_6 = string;
export type OPERATOR_7 = string;
export type OPERATOR_8 = string;
export type VALUE = VALUE_$0;
export type VALUE_$0 = VALUE_$0_1 | VALUE_$0_2 | VALUE_$0_3;
export type VALUE_$0_1 = NUMBER;
export type VALUE_$0_2 = STRING;
export type VALUE_$0_3 = QUOTED_STRING;
export type NUMBER = string;
export type STRING = string;
export type QUOTED_STRING = string;
export interface ACTION {
    kind: ASTKinds.ACTION;
    action: ACTION_$0;
}
export type ACTION_$0 = ACTION_$0_1 | ACTION_$0_2 | ACTION_$0_3 | ACTION_$0_4 | ACTION_$0_5;
export type ACTION_$0_1 = COLOR_ACTION;
export type ACTION_$0_2 = FONT_ACTION;
export type ACTION_$0_3 = SOUND_ACTION;
export type ACTION_$0_4 = EFFECT_ACTION;
export type ACTION_$0_5 = ICON_ACTION;
export interface COLOR_ACTION {
    kind: ASTKinds.COLOR_ACTION;
    action: COLOR_ACTION_$0;
    color: RGBA_VALUE;
}
export type COLOR_ACTION_$0 = COLOR_ACTION_$0_1 | COLOR_ACTION_$0_2 | COLOR_ACTION_$0_3;
export type COLOR_ACTION_$0_1 = string;
export type COLOR_ACTION_$0_2 = string;
export type COLOR_ACTION_$0_3 = string;
export interface FONT_ACTION {
    kind: ASTKinds.FONT_ACTION;
    size: NUMBER;
}
export interface SOUND_ACTION {
    kind: ASTKinds.SOUND_ACTION;
}
export interface EFFECT_ACTION {
    kind: ASTKinds.EFFECT_ACTION;
}
export interface EFFECT_ACTION_$0 {
    kind: ASTKinds.EFFECT_ACTION_$0;
}
export interface ICON_ACTION {
    kind: ASTKinds.ICON_ACTION;
}
export type COLOR_NAME = COLOR_NAME_1 | COLOR_NAME_2 | COLOR_NAME_3 | COLOR_NAME_4 | COLOR_NAME_5 | COLOR_NAME_6 | COLOR_NAME_7 | COLOR_NAME_8 | COLOR_NAME_9 | COLOR_NAME_10 | COLOR_NAME_11;
export type COLOR_NAME_1 = string;
export type COLOR_NAME_2 = string;
export type COLOR_NAME_3 = string;
export type COLOR_NAME_4 = string;
export type COLOR_NAME_5 = string;
export type COLOR_NAME_6 = string;
export type COLOR_NAME_7 = string;
export type COLOR_NAME_8 = string;
export type COLOR_NAME_9 = string;
export type COLOR_NAME_10 = string;
export type COLOR_NAME_11 = string;
export type SHAPE = SHAPE_1 | SHAPE_2 | SHAPE_3 | SHAPE_4 | SHAPE_5 | SHAPE_6 | SHAPE_7 | SHAPE_8 | SHAPE_9 | SHAPE_10 | SHAPE_11 | SHAPE_12;
export type SHAPE_1 = string;
export type SHAPE_2 = string;
export type SHAPE_3 = string;
export type SHAPE_4 = string;
export type SHAPE_5 = string;
export type SHAPE_6 = string;
export type SHAPE_7 = string;
export type SHAPE_8 = string;
export type SHAPE_9 = string;
export type SHAPE_10 = string;
export type SHAPE_11 = string;
export type SHAPE_12 = string;
export interface RGBA_VALUE {
    kind: ASTKinds.RGBA_VALUE;
    red: RGB_NUMBER;
    green: RGB_NUMBER;
    blue: RGB_NUMBER;
    alpha: Nullable<RGB_NUMBER>;
}
export type RGB_NUMBER = string;
export type _ = string;
export type NL = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchFILTER($$dpth: number, $$cr?: ErrorTracker): Nullable<FILTER> {
        return this.run<FILTER>($$dpth,
            () => {
                let $scope$blocks: Nullable<[BLOCK, ...BLOCK[]]>;
                let $$res: Nullable<FILTER> = null;
                if (true
                    && ($scope$blocks = this.loopPlus<BLOCK>(() => this.matchBLOCK($$dpth + 1, $$cr))) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.FILTER, blocks: $scope$blocks};
                }
                return $$res;
            });
    }
    public matchBLOCK($$dpth: number, $$cr?: ErrorTracker): Nullable<BLOCK> {
        return this.run<BLOCK>($$dpth,
            () => {
                let $scope$visibility: Nullable<VISIBILITY>;
                let $scope$conditions: Nullable<[CONDITION, ...CONDITION[]]>;
                let $scope$actions: Nullable<ACTION[]>;
                let $$res: Nullable<BLOCK> = null;
                if (true
                    && ($scope$visibility = this.matchVISIBILITY($$dpth + 1, $$cr)) !== null
                    && this.matchNL($$dpth + 1, $$cr) !== null
                    && ($scope$conditions = this.loopPlus<CONDITION>(() => this.matchCONDITION($$dpth + 1, $$cr))) !== null
                    && ($scope$actions = this.loop<ACTION>(() => this.matchACTION($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.loop<NL>(() => this.matchNL($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.BLOCK, visibility: $scope$visibility, conditions: $scope$conditions, actions: $scope$actions};
                }
                return $$res;
            });
    }
    public matchVISIBILITY($$dpth: number, $$cr?: ErrorTracker): Nullable<VISIBILITY> {
        return this.choice<VISIBILITY>([
            () => this.matchVISIBILITY_1($$dpth + 1, $$cr),
            () => this.matchVISIBILITY_2($$dpth + 1, $$cr),
        ]);
    }
    public matchVISIBILITY_1($$dpth: number, $$cr?: ErrorTracker): Nullable<VISIBILITY_1> {
        return this.regexAccept(String.raw`(?:Show)`, "", $$dpth + 1, $$cr);
    }
    public matchVISIBILITY_2($$dpth: number, $$cr?: ErrorTracker): Nullable<VISIBILITY_2> {
        return this.regexAccept(String.raw`(?:Hide)`, "", $$dpth + 1, $$cr);
    }
    public matchCONDITION($$dpth: number, $$cr?: ErrorTracker): Nullable<CONDITION> {
        return this.run<CONDITION>($$dpth,
            () => {
                let $scope$type: Nullable<CONDITION_TYPE>;
                let $scope$operator: Nullable<Nullable<CONDITION_$0>>;
                let $scope$value: Nullable<VALUE_LIST>;
                let $$res: Nullable<CONDITION> = null;
                if (true
                    && ($scope$type = this.matchCONDITION_TYPE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$operator = this.matchCONDITION_$0($$dpth + 1, $$cr)) || true)
                    && ($scope$value = this.matchVALUE_LIST($$dpth + 1, $$cr)) !== null
                    && this.matchNL($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.CONDITION, type: $scope$type, operator: $scope$operator, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchCONDITION_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CONDITION_$0> {
        return this.run<CONDITION_$0>($$dpth,
            () => {
                let $$res: Nullable<CONDITION_$0> = null;
                if (true
                    && this.matchOPERATOR($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.CONDITION_$0, };
                }
                return $$res;
            });
    }
    public matchVALUE_LIST($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_LIST> {
        return this.matchVALUE_LIST_$0($$dpth + 1, $$cr);
    }
    public matchVALUE_LIST_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_LIST_$0> {
        return this.choice<VALUE_LIST_$0>([
            () => this.matchVALUE_LIST_$0_1($$dpth + 1, $$cr),
            () => this.matchVALUE_LIST_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchVALUE_LIST_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_LIST_$0_1> {
        return this.matchMULTI_VALUE($$dpth + 1, $$cr);
    }
    public matchVALUE_LIST_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_LIST_$0_2> {
        return this.matchSINGLE_VALUE($$dpth + 1, $$cr);
    }
    public matchSINGLE_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<SINGLE_VALUE> {
        return this.choice<SINGLE_VALUE>([
            () => this.matchSINGLE_VALUE_1($$dpth + 1, $$cr),
            () => this.matchSINGLE_VALUE_2($$dpth + 1, $$cr),
            () => this.matchSINGLE_VALUE_3($$dpth + 1, $$cr),
        ]);
    }
    public matchSINGLE_VALUE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SINGLE_VALUE_1> {
        return this.matchNUMBER($$dpth + 1, $$cr);
    }
    public matchSINGLE_VALUE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SINGLE_VALUE_2> {
        return this.matchSTRING($$dpth + 1, $$cr);
    }
    public matchSINGLE_VALUE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<SINGLE_VALUE_3> {
        return this.matchQUOTED_STRING($$dpth + 1, $$cr);
    }
    public matchMULTI_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<MULTI_VALUE> {
        return this.run<MULTI_VALUE>($$dpth,
            () => {
                let $$res: Nullable<MULTI_VALUE> = null;
                if (true
                    && this.matchQUOTED_STRING($$dpth + 1, $$cr) !== null
                    && this.loopPlus<MULTI_VALUE_$0>(() => this.matchMULTI_VALUE_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.MULTI_VALUE, };
                }
                return $$res;
            });
    }
    public matchMULTI_VALUE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<MULTI_VALUE_$0> {
        return this.run<MULTI_VALUE_$0>($$dpth,
            () => {
                let $$res: Nullable<MULTI_VALUE_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchQUOTED_STRING($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.MULTI_VALUE_$0, };
                }
                return $$res;
            });
    }
    public matchCONDITION_TYPE($$dpth: number, $$cr?: ErrorTracker): Nullable<CONDITION_TYPE> {
        return this.choice<CONDITION_TYPE>([
            () => this.matchCONDITION_TYPE_1($$dpth + 1, $$cr),
            () => this.matchCONDITION_TYPE_2($$dpth + 1, $$cr),
            () => this.matchCONDITION_TYPE_3($$dpth + 1, $$cr),
            () => this.matchCONDITION_TYPE_4($$dpth + 1, $$cr),
            () => this.matchCONDITION_TYPE_5($$dpth + 1, $$cr),
        ]);
    }
    public matchCONDITION_TYPE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CONDITION_TYPE_1> {
        return this.regexAccept(String.raw`(?:Rarity)`, "", $$dpth + 1, $$cr);
    }
    public matchCONDITION_TYPE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CONDITION_TYPE_2> {
        return this.regexAccept(String.raw`(?:Class)`, "", $$dpth + 1, $$cr);
    }
    public matchCONDITION_TYPE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<CONDITION_TYPE_3> {
        return this.regexAccept(String.raw`(?:BaseType)`, "", $$dpth + 1, $$cr);
    }
    public matchCONDITION_TYPE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<CONDITION_TYPE_4> {
        return this.regexAccept(String.raw`(?:AreaLevel)`, "", $$dpth + 1, $$cr);
    }
    public matchCONDITION_TYPE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<CONDITION_TYPE_5> {
        return this.regexAccept(String.raw`(?:StackSize)`, "", $$dpth + 1, $$cr);
    }
    public matchOPERATOR($$dpth: number, $$cr?: ErrorTracker): Nullable<OPERATOR> {
        return this.choice<OPERATOR>([
            () => this.matchOPERATOR_1($$dpth + 1, $$cr),
            () => this.matchOPERATOR_2($$dpth + 1, $$cr),
            () => this.matchOPERATOR_3($$dpth + 1, $$cr),
            () => this.matchOPERATOR_4($$dpth + 1, $$cr),
            () => this.matchOPERATOR_5($$dpth + 1, $$cr),
            () => this.matchOPERATOR_6($$dpth + 1, $$cr),
            () => this.matchOPERATOR_7($$dpth + 1, $$cr),
            () => this.matchOPERATOR_8($$dpth + 1, $$cr),
        ]);
    }
    public matchOPERATOR_1($$dpth: number, $$cr?: ErrorTracker): Nullable<OPERATOR_1> {
        return this.regexAccept(String.raw`(?:==)`, "", $$dpth + 1, $$cr);
    }
    public matchOPERATOR_2($$dpth: number, $$cr?: ErrorTracker): Nullable<OPERATOR_2> {
        return this.regexAccept(String.raw`(?:<=)`, "", $$dpth + 1, $$cr);
    }
    public matchOPERATOR_3($$dpth: number, $$cr?: ErrorTracker): Nullable<OPERATOR_3> {
        return this.regexAccept(String.raw`(?:>=)`, "", $$dpth + 1, $$cr);
    }
    public matchOPERATOR_4($$dpth: number, $$cr?: ErrorTracker): Nullable<OPERATOR_4> {
        return this.regexAccept(String.raw`(?:!=)`, "", $$dpth + 1, $$cr);
    }
    public matchOPERATOR_5($$dpth: number, $$cr?: ErrorTracker): Nullable<OPERATOR_5> {
        return this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr);
    }
    public matchOPERATOR_6($$dpth: number, $$cr?: ErrorTracker): Nullable<OPERATOR_6> {
        return this.regexAccept(String.raw`(?:!)`, "", $$dpth + 1, $$cr);
    }
    public matchOPERATOR_7($$dpth: number, $$cr?: ErrorTracker): Nullable<OPERATOR_7> {
        return this.regexAccept(String.raw`(?:<)`, "", $$dpth + 1, $$cr);
    }
    public matchOPERATOR_8($$dpth: number, $$cr?: ErrorTracker): Nullable<OPERATOR_8> {
        return this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr);
    }
    public matchVALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE> {
        return this.matchVALUE_$0($$dpth + 1, $$cr);
    }
    public matchVALUE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_$0> {
        return this.choice<VALUE_$0>([
            () => this.matchVALUE_$0_1($$dpth + 1, $$cr),
            () => this.matchVALUE_$0_2($$dpth + 1, $$cr),
            () => this.matchVALUE_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchVALUE_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_$0_1> {
        return this.matchNUMBER($$dpth + 1, $$cr);
    }
    public matchVALUE_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_$0_2> {
        return this.matchSTRING($$dpth + 1, $$cr);
    }
    public matchVALUE_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_$0_3> {
        return this.matchQUOTED_STRING($$dpth + 1, $$cr);
    }
    public matchNUMBER($$dpth: number, $$cr?: ErrorTracker): Nullable<NUMBER> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, "", $$dpth + 1, $$cr);
    }
    public matchSTRING($$dpth: number, $$cr?: ErrorTracker): Nullable<STRING> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9]+)`, "", $$dpth + 1, $$cr);
    }
    public matchQUOTED_STRING($$dpth: number, $$cr?: ErrorTracker): Nullable<QUOTED_STRING> {
        return this.regexAccept(String.raw`(?:"[^"]*")`, "", $$dpth + 1, $$cr);
    }
    public matchACTION($$dpth: number, $$cr?: ErrorTracker): Nullable<ACTION> {
        return this.run<ACTION>($$dpth,
            () => {
                let $scope$action: Nullable<ACTION_$0>;
                let $$res: Nullable<ACTION> = null;
                if (true
                    && ($scope$action = this.matchACTION_$0($$dpth + 1, $$cr)) !== null
                    && this.matchNL($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ACTION, action: $scope$action};
                }
                return $$res;
            });
    }
    public matchACTION_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ACTION_$0> {
        return this.choice<ACTION_$0>([
            () => this.matchACTION_$0_1($$dpth + 1, $$cr),
            () => this.matchACTION_$0_2($$dpth + 1, $$cr),
            () => this.matchACTION_$0_3($$dpth + 1, $$cr),
            () => this.matchACTION_$0_4($$dpth + 1, $$cr),
            () => this.matchACTION_$0_5($$dpth + 1, $$cr),
        ]);
    }
    public matchACTION_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ACTION_$0_1> {
        return this.matchCOLOR_ACTION($$dpth + 1, $$cr);
    }
    public matchACTION_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ACTION_$0_2> {
        return this.matchFONT_ACTION($$dpth + 1, $$cr);
    }
    public matchACTION_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ACTION_$0_3> {
        return this.matchSOUND_ACTION($$dpth + 1, $$cr);
    }
    public matchACTION_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ACTION_$0_4> {
        return this.matchEFFECT_ACTION($$dpth + 1, $$cr);
    }
    public matchACTION_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ACTION_$0_5> {
        return this.matchICON_ACTION($$dpth + 1, $$cr);
    }
    public matchCOLOR_ACTION($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_ACTION> {
        return this.run<COLOR_ACTION>($$dpth,
            () => {
                let $scope$action: Nullable<COLOR_ACTION_$0>;
                let $scope$color: Nullable<RGBA_VALUE>;
                let $$res: Nullable<COLOR_ACTION> = null;
                if (true
                    && ($scope$action = this.matchCOLOR_ACTION_$0($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$color = this.matchRGBA_VALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.COLOR_ACTION, action: $scope$action, color: $scope$color};
                }
                return $$res;
            });
    }
    public matchCOLOR_ACTION_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_ACTION_$0> {
        return this.choice<COLOR_ACTION_$0>([
            () => this.matchCOLOR_ACTION_$0_1($$dpth + 1, $$cr),
            () => this.matchCOLOR_ACTION_$0_2($$dpth + 1, $$cr),
            () => this.matchCOLOR_ACTION_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchCOLOR_ACTION_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_ACTION_$0_1> {
        return this.regexAccept(String.raw`(?:SetTextColor)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_ACTION_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_ACTION_$0_2> {
        return this.regexAccept(String.raw`(?:SetBorderColor)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_ACTION_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_ACTION_$0_3> {
        return this.regexAccept(String.raw`(?:SetBackgroundColor)`, "", $$dpth + 1, $$cr);
    }
    public matchFONT_ACTION($$dpth: number, $$cr?: ErrorTracker): Nullable<FONT_ACTION> {
        return this.run<FONT_ACTION>($$dpth,
            () => {
                let $scope$size: Nullable<NUMBER>;
                let $$res: Nullable<FONT_ACTION> = null;
                if (true
                    && this.regexAccept(String.raw`(?:SetFontSize)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$size = this.matchNUMBER($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FONT_ACTION, size: $scope$size};
                }
                return $$res;
            });
    }
    public matchSOUND_ACTION($$dpth: number, $$cr?: ErrorTracker): Nullable<SOUND_ACTION> {
        return this.run<SOUND_ACTION>($$dpth,
            () => {
                let $$res: Nullable<SOUND_ACTION> = null;
                if (true
                    && this.regexAccept(String.raw`(?:PlayAlertSound)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNUMBER($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNUMBER($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SOUND_ACTION, };
                }
                return $$res;
            });
    }
    public matchEFFECT_ACTION($$dpth: number, $$cr?: ErrorTracker): Nullable<EFFECT_ACTION> {
        return this.run<EFFECT_ACTION>($$dpth,
            () => {
                let $$res: Nullable<EFFECT_ACTION> = null;
                if (true
                    && this.regexAccept(String.raw`(?:PlayEffect)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchCOLOR_NAME($$dpth + 1, $$cr) !== null
                    && ((this.matchEFFECT_ACTION_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.EFFECT_ACTION, };
                }
                return $$res;
            });
    }
    public matchEFFECT_ACTION_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<EFFECT_ACTION_$0> {
        return this.run<EFFECT_ACTION_$0>($$dpth,
            () => {
                let $$res: Nullable<EFFECT_ACTION_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:Temp)`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.EFFECT_ACTION_$0, };
                }
                return $$res;
            });
    }
    public matchICON_ACTION($$dpth: number, $$cr?: ErrorTracker): Nullable<ICON_ACTION> {
        return this.run<ICON_ACTION>($$dpth,
            () => {
                let $$res: Nullable<ICON_ACTION> = null;
                if (true
                    && this.regexAccept(String.raw`(?:MinimapIcon)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNUMBER($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchCOLOR_NAME($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchSHAPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ICON_ACTION, };
                }
                return $$res;
            });
    }
    public matchCOLOR_NAME($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME> {
        return this.choice<COLOR_NAME>([
            () => this.matchCOLOR_NAME_1($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_2($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_3($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_4($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_5($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_6($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_7($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_8($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_9($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_10($$dpth + 1, $$cr),
            () => this.matchCOLOR_NAME_11($$dpth + 1, $$cr),
        ]);
    }
    public matchCOLOR_NAME_1($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_1> {
        return this.regexAccept(String.raw`(?:Red)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_2($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_2> {
        return this.regexAccept(String.raw`(?:Green)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_3($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_3> {
        return this.regexAccept(String.raw`(?:Blue)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_4($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_4> {
        return this.regexAccept(String.raw`(?:Brown)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_5($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_5> {
        return this.regexAccept(String.raw`(?:White)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_6($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_6> {
        return this.regexAccept(String.raw`(?:Yellow)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_7($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_7> {
        return this.regexAccept(String.raw`(?:Cyan)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_8($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_8> {
        return this.regexAccept(String.raw`(?:Grey)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_9($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_9> {
        return this.regexAccept(String.raw`(?:Orange)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_10($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_10> {
        return this.regexAccept(String.raw`(?:Pink)`, "", $$dpth + 1, $$cr);
    }
    public matchCOLOR_NAME_11($$dpth: number, $$cr?: ErrorTracker): Nullable<COLOR_NAME_11> {
        return this.regexAccept(String.raw`(?:Purple)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE> {
        return this.choice<SHAPE>([
            () => this.matchSHAPE_1($$dpth + 1, $$cr),
            () => this.matchSHAPE_2($$dpth + 1, $$cr),
            () => this.matchSHAPE_3($$dpth + 1, $$cr),
            () => this.matchSHAPE_4($$dpth + 1, $$cr),
            () => this.matchSHAPE_5($$dpth + 1, $$cr),
            () => this.matchSHAPE_6($$dpth + 1, $$cr),
            () => this.matchSHAPE_7($$dpth + 1, $$cr),
            () => this.matchSHAPE_8($$dpth + 1, $$cr),
            () => this.matchSHAPE_9($$dpth + 1, $$cr),
            () => this.matchSHAPE_10($$dpth + 1, $$cr),
            () => this.matchSHAPE_11($$dpth + 1, $$cr),
            () => this.matchSHAPE_12($$dpth + 1, $$cr),
        ]);
    }
    public matchSHAPE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_1> {
        return this.regexAccept(String.raw`(?:Circle)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_2> {
        return this.regexAccept(String.raw`(?:Diamond)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_3> {
        return this.regexAccept(String.raw`(?:Hexagon)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_4> {
        return this.regexAccept(String.raw`(?:Square)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_5> {
        return this.regexAccept(String.raw`(?:Star)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_6($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_6> {
        return this.regexAccept(String.raw`(?:Triangle)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_7($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_7> {
        return this.regexAccept(String.raw`(?:Cross)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_8($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_8> {
        return this.regexAccept(String.raw`(?:Moon)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_9($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_9> {
        return this.regexAccept(String.raw`(?:Raindrop)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_10($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_10> {
        return this.regexAccept(String.raw`(?:Kite)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_11($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_11> {
        return this.regexAccept(String.raw`(?:Pentagon)`, "", $$dpth + 1, $$cr);
    }
    public matchSHAPE_12($$dpth: number, $$cr?: ErrorTracker): Nullable<SHAPE_12> {
        return this.regexAccept(String.raw`(?:UpsideDownHouse)`, "", $$dpth + 1, $$cr);
    }
    public matchRGBA_VALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<RGBA_VALUE> {
        return this.run<RGBA_VALUE>($$dpth,
            () => {
                let $scope$red: Nullable<RGB_NUMBER>;
                let $scope$green: Nullable<RGB_NUMBER>;
                let $scope$blue: Nullable<RGB_NUMBER>;
                let $scope$alpha: Nullable<Nullable<RGB_NUMBER>>;
                let $$res: Nullable<RGBA_VALUE> = null;
                if (true
                    && ($scope$red = this.matchRGB_NUMBER($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$green = this.matchRGB_NUMBER($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$blue = this.matchRGB_NUMBER($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && (($scope$alpha = this.matchRGB_NUMBER($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.RGBA_VALUE, red: $scope$red, green: $scope$green, blue: $scope$blue, alpha: $scope$alpha};
                }
                return $$res;
            });
    }
    public matchRGB_NUMBER($$dpth: number, $$cr?: ErrorTracker): Nullable<RGB_NUMBER> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, "", $$dpth + 1, $$cr);
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?: )`, "", $$dpth + 1, $$cr);
    }
    public matchNL($$dpth: number, $$cr?: ErrorTracker): Nullable<NL> {
        return this.regexAccept(String.raw`(?:\n\r?)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchFILTER(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchFILTER(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchFILTER(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<FILTER>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}